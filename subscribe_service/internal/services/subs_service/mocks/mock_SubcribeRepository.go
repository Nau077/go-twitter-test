// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_subs_service is a generated GoMock package.
package mock_subs_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubcribeRepository is a mock of SubcribeRepository interface.
type MockSubcribeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubcribeRepositoryMockRecorder
}

// MockSubcribeRepositoryMockRecorder is the mock recorder for MockSubcribeRepository.
type MockSubcribeRepositoryMockRecorder struct {
	mock *MockSubcribeRepository
}

// NewMockSubcribeRepository creates a new mock instance.
func NewMockSubcribeRepository(ctrl *gomock.Controller) *MockSubcribeRepository {
	mock := &MockSubcribeRepository{ctrl: ctrl}
	mock.recorder = &MockSubcribeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubcribeRepository) EXPECT() *MockSubcribeRepositoryMockRecorder {
	return m.recorder
}

// CancelSubcription mocks base method.
func (m *MockSubcribeRepository) CancelSubcription(ctx context.Context, user string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubcription", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSubcription indicates an expected call of CancelSubcription.
func (mr *MockSubcribeRepositoryMockRecorder) CancelSubcription(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubcription", reflect.TypeOf((*MockSubcribeRepository)(nil).CancelSubcription), ctx, user)
}

// CreateSubscription mocks base method.
func (m *MockSubcribeRepository) CreateSubscription(ctx context.Context, user1, user2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, user1, user2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubcribeRepositoryMockRecorder) CreateSubscription(ctx, user1, user2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubcribeRepository)(nil).CreateSubscription), ctx, user1, user2)
}

// GetSubcriptionList mocks base method.
func (m *MockSubcribeRepository) GetSubcriptionList(ctx context.Context, user string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubcriptionList", ctx, user)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubcriptionList indicates an expected call of GetSubcriptionList.
func (mr *MockSubcribeRepositoryMockRecorder) GetSubcriptionList(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubcriptionList", reflect.TypeOf((*MockSubcribeRepository)(nil).GetSubcriptionList), ctx, user)
}
